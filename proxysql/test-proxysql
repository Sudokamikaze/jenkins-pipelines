#!/bin/bash
#
# Execute this tool to test binary releases
#
#  possible jenkins vars:
#      CMAKE_BUILD_TYPE = (RelWithDebInfo Debug)
#      DEFAULT_TESTING = (yes no)
#      QA_ARGS
#      PXC_VERSION = (PXC57 PXC80)

set -o errexit
set -o xtrace

if [ -f /usr/bin/yum ]; then
  RHEL=$(rpm --eval %rhel)
  if [[ $RHEL -eq 8 ]]; then
     sudo dnf module disable mysql -y
  fi
fi

function process_proxysql_output {
# parameters are:
  local TESTSUITE=${1}
  local INFILE=${2}
  local OUTFILE=${3}
  export LC_ALL=C
  cat proxysql_qa.output | grep 'ok \|not ok' | gawk 'BEGIN     { print "<testsuite name=\"@@TESTSUITE@@\" tests=\"@@PASSED@@\" failures=\"@@FAILURES@@\">" }
      $1 ~ /ok/     { printf "\t<testcase name=\"%s\"><passed/></testcase>\n", $0}
      $1 ~ /not/    { printf "\t<testcase name=\"%s\"><failure/></testcase>\n", $0}
      END { print "</testsuite>" }' > ${OUTFILE}

  PASSED=$(grep -c 'name=\"ok' ${OUTFILE} ||:)
  FAILURES=$(grep -c '<failure/>' ${OUTFILE} ||:)

  sed -i.bak -e "s:@@TESTSUITE@@:${TESTSUITE}:g" ${OUTFILE}
  sed -i.bak -e "s:@@PASSED@@:${PASSED}:g" ${OUTFILE}
  sed -i.bak -e "s:@@FAILURES@@:${FAILURES}:g" ${OUTFILE}
}

WORKDIR_ABS=$(cd ${1:-./build/proxysql}; pwd -P)
rm -rf ${WORKDIR_ABS}/WORKDIR ${WORKDIR_ABS}/PXB ${WORKDIR_ABS}/PXC ${WORKDIR_ABS}/PROXY_ADMIN
mkdir -p ${WORKDIR_ABS}/PROXY_ADMIN ${WORKDIR_ABS}/WORKDIR/proxysql-2.0/usr/bin ${WORKDIR_ABS}/WORKDIR/proxysql-2.0/etc

if [[ "${PXC_VERSION}" == "PXC80" ]]; then
# Downloading PXC tar ball package
  sudo wget -q -O ${WORKDIR_ABS}/WORKDIR/Percona-XtraDB-Cluster_8.0.22-13.1_Linux.x86_64.glibc2.17-minimal.tar.gz https://www.percona.com/downloads/Percona-XtraDB-Cluster-LATEST/Percona-XtraDB-Cluster-8.0.22/binary/tarball/Percona-XtraDB-Cluster_8.0.22-13.1_Linux.x86_64.glibc2.17-minimal.tar.gz

# Installing PXC client package
  sudo wget https://repo.percona.com/apt/percona-release_latest.generic_all.deb
  sudo dpkg -i percona-release_latest.generic_all.deb
  sudo percona-release enable-only pxc-80 release
  sudo percona-release enable tools release
  sudo apt-get update -y
  sudo apt-get install -y percona-xtradb-cluster

elif [[ "${PXC_VERSION}" == "PXC57" ]]; then
  sudo wget -q -O ${WORKDIR_ABS}/WORKDIR/Percona-XtraDB-Cluster-5.7.33-rel36-49.1.Linux.x86_64.glibc2.12-minimal.tar.gz  https://www.percona.com/downloads/Percona-XtraDB-Cluster-57/Percona-XtraDB-Cluster-5.7.33-31.49/binary/tarball/Percona-XtraDB-Cluster-5.7.33-rel36-49.1.Linux.x86_64.glibc2.12-minimal.tar.gz
  sudo tar -C ${WORKDIR_ABS}/WORKDIR/PXC --strip-components=1 -zxpf $(ls $WORKDIR_ABS/WORKDIR/Percona-XtraDB-Cluster-5.7.33-rel36-49.1.Linux.x86_64.glibc2.12-minimal.tar.gz | head -1)
  sudo wget https://repo.percona.com/apt/percona-release_latest.generic_all.deb
  sudo dpkg -i percona-release_latest.generic_all.deb
  sudo percona-release enable original
  sudo apt-get update -y
  sudo apt-get install -y percona-xtradb-cluster-57
fi

if [ -f /usr/bin/yum ]; then
  sudo yum remove -y Percona-Server-shared-56-5.6.49-rel89.0.1.el7.x86_64
  if [[ $RHEL -eq 8 ]]; then
    sudo yum remove -y mariadb-connector-c-config-3.0.7-1.el8.noarch
  fi
    sudo yum install -y percona-xtrabackup-24 Percona-XtraDB-Cluster-57 proxysql2
else
# Installing proxysql package
  sudo apt update -y
  sudo wget -q -O ${WORKDIR_ABS}/proxysql_2.0.17-ubuntu20_amd64.deb https://repo.proxysql.com/ProxySQL/proxysql-2.0.x/focal/proxysql_2.0.17-ubuntu20_amd64.deb
  sudo apt-get remove proxysql2
  sudo apt-get purge proxysql2
  sudo dpkg -i ${WORKDIR_ABS}/proxysql_2.0.17-ubuntu20_amd64.deb
fi

#tar -C ${WORKDIR_ABS}/WORKDIR/PROXY_ADMIN  --strip-components=1 -zxpf $(ls $WORKDIR_ABS/proxysql*.tar.gz | head -1)${WORKDIR_ABS}/WORKDIR/proxysql-${WORKDIR_ABS}/WORKDIR/proxysql-

pushd ${WORKDIR_ABS}/WORKDIR
sudo tar -xzf $WORKDIR_ABS/proxysql*.tar.gz -C ${WORKDIR_ABS}/PROXY_ADMIN
sudo ln -s $WORKDIR_ABS/PROXY_ADMIN/proxysql*/usr/bin/proxysql-admin ${WORKDIR_ABS}/WORKDIR/proxysql-admin
sudo ln -s $WORKDIR_ABS/PROXY_ADMIN/proxysql*/usr/bin/proxysql-admin-common ${WORKDIR_ABS}/WORKDIR/proxysql-admin-common
sudo ln -s $WORKDIR_ABS/PROXY_ADMIN/proxysql*/usr/bin/proxysql-login-file ${WORKDIR_ABS}/WORKDIR/proxysql-login-file
sudo ln -s $WORKDIR_ABS/PROXY_ADMIN/proxysql*/etc/proxysql-admin.cnf ${WORKDIR_ABS}/WORKDIR/proxysql-2.0/etc/proxysql-admin.cnf
sudo ln -s /usr/bin/proxysql $WORKDIR_ABS/WORKDIR/proxysql-2.0/usr/bin/proxysql
status=0
# Running ProxySQL QA script
if [ -f /usr/bin/yum ]; then
    sudo cp /etc/hosts ${WORKDIR_ABS}/hosts.new
    sudo sed -i 's/::1*.*localhost /::1 /' ${WORKDIR_ABS}/hosts.new
    sudo cp -f ${WORKDIR_ABS}/hosts.new /etc/hosts
fi
sudo sed -i 's/wsrep_sst_method=rsync/wsrep_sst_method=xtrabackup-v2/g' $WORKDIR_ABS/PROXY_ADMIN/proxysql*/tests/proxysql-admin-testsuite.sh
sudo sed -i 's/localhost/127.0.0.1/g' $WORKDIR_ABS/PROXY_ADMIN/proxysql*/etc/proxysql-admin.cnf
sudo bash -x $WORKDIR_ABS/PROXY_ADMIN/proxysql*/tests/proxysql-admin-testsuite.sh \
$WORKDIR_ABS/WORKDIR | tee $WORKDIR_ABS/WORKDIR/proxysql_qa.output || status=$?
process_proxysql_output PROXYSQL "$WORKDIR_ABS/WORKDIR/proxysql_qa.output" "${WORKDIR_ABS}/WORKDIR/junit.xml"
popd

exit $status
